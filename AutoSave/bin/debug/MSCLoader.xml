<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MSCLoader</name>
    </assembly>
    <members>
        <member name="T:MSCLoader.Playlists">
            <summary>
            Parse playlists files
            </summary>
        </member>
        <member name="M:MSCLoader.Playlists.plsPlaylist(System.String)">
            <summary>
            Parse *.pls playlist file and return List of paths
            </summary>
            <param name="path">Path to *.pls file</param>
            <returns>List of paths to files/urls</returns>
        </member>
        <member name="M:MSCLoader.Playlists.plsPlaylist(System.IO.Stream)">
            <summary>
            Parse *.pls playlist file and return List of paths
            </summary>
            <param name="stream">File stream</param>
            <returns>List of paths to files/urls</returns>
        </member>
        <member name="M:MSCLoader.Playlists.m3uPlaylist(System.String)">
            <summary>
            Parse *.m3u and *.m3u8 playlist files and return List of paths
            </summary>
            <param name="path">Path to .m3u or *.m3u8 file</param>
            <returns>List of paths to files/urls</returns>
        </member>
        <member name="M:MSCLoader.Playlists.m3uPlaylist(System.IO.Stream)">
            <summary>
            Parse *.m3u and *.m3u8 playlist files and return List of paths
            </summary>
            <param name="stream">File stream</param>
            <returns>List of paths to files/urls</returns>
        </member>
        <member name="T:MSCLoader.ConsoleCommand">
            <summary>
            Allows for Mods to easily add console commands.
            </summary>
            <example><code source="Examples.cs" region="ConsoleCommand" lang="C#" 
            title="Example ConsoleCommand Class" /></example>
        </member>
        <member name="P:MSCLoader.ConsoleCommand.Name">
            <summary>
            The name of the ConsoleCommand (What the user will have to type in console to trigger the command). Cannot contain spaces!
            </summary>
        </member>
        <member name="P:MSCLoader.ConsoleCommand.Help">
            <summary>
            The help message that will be displayed for the command when the user types "help"
            </summary>
        </member>
        <member name="P:MSCLoader.ConsoleCommand.ShowInHelp">
            <summary>
            Show this command in help screen.
            (Default true).
            </summary>
        </member>
        <member name="M:MSCLoader.ConsoleCommand.Run(System.String[])">
            <summary>
            The function that will get called when the command is ran.
            </summary>
            <param name="args">The arguments the user passed after the command.</param>
            <example><code source="Examples.cs" region="ConsoleCommandRun" lang="C#" 
            title="ConsoleCommand Add" /></example>
        </member>
        <member name="M:MSCLoader.ConsoleCommand.Add(MSCLoader.ConsoleCommand)">
            <summary>
            Adds a console command.
            </summary>
            <param name="cmd">The instance of the command to add.</param>
            <example><code source="Examples.cs" region="ConsoleCommandAdd" lang="C#" 
            title="ConsoleCommand Add" /></example>
        </member>
        <member name="T:MSCLoader.FsmHook">
            <summary>
            Playmaker hooks.
            </summary>
        </member>
        <member name="M:MSCLoader.FsmHook.FsmInject(UnityEngine.GameObject,System.String,System.Action)">
            <summary>
            Hook to playmaker state
            </summary>
            <param name="gameObject">GameObject where to hook</param>
            <param name="stateName">Name of the state</param>
            <param name="hook">Your function to hook</param>
            <example><code lang="C#" title="Fsm Inject" >FsmHook.FsmInject(GameObject.Find("Some game object"), "state name", function);</code></example>
        </member>
        <member name="T:MSCLoader.Keybind">
            <summary>
            Add easily rebindable keybinds.
            </summary>
        </member>
        <member name="F:MSCLoader.Keybind.Keybinds">
            <summary>
            List of Keybinds
            </summary>
        </member>
        <member name="F:MSCLoader.Keybind.DefaultKeybinds">
            <summary>
            List of Default Keybinds
            </summary>
        </member>
        <member name="P:MSCLoader.Keybind.ID">
            <summary>
            The ID of the keybind (Should only be used once in your mod).
            </summary>
        </member>
        <member name="P:MSCLoader.Keybind.Name">
            <summary>
            The name that will be displayed in settings
            </summary>
        </member>
        <member name="P:MSCLoader.Keybind.Key">
            <summary>
            The KeyCode the user will have to press.
            </summary>
        </member>
        <member name="P:MSCLoader.Keybind.Modifier">
            <summary>
            The modifier KeyCode the user will have to press with the Key.
            </summary>
        </member>
        <member name="P:MSCLoader.Keybind.Mod">
            <summary>
            The Mod this Keybind belongs to (This is set when using Keybind.Add).
            </summary>
        </member>
        <member name="P:MSCLoader.Keybind.Vals">
            <summary>
            Helpful additional variables.
            </summary>
        </member>
        <member name="M:MSCLoader.Keybind.Add(MSCLoader.Mod,MSCLoader.Keybind)">
            <summary>
            Add a keybind.
            </summary>
            <param name="mod">The instance of your mod.</param>
            <param name="key">The Keybind to add.</param>
            <example><code source="Examples.cs" region="KeyBindAdd" lang="C#" 
            title="Keybind Add" /></example>
        </member>
        <member name="M:MSCLoader.Keybind.AddHeader(MSCLoader.Mod,System.String)">
            <summary>
            Add Header, blue title bar that can be used to separate settings.
            </summary>
            <param name="mod">Your mod instance</param>
            <param name="HeaderTitle">Title of your header</param>
        </member>
        <member name="M:MSCLoader.Keybind.AddHeader(MSCLoader.Mod,System.String,UnityEngine.Color)">
            <summary>
            Add Header, blue title bar that can be used to separate settings.
            </summary>
            <param name="mod">Your mod instance</param>
            <param name="HeaderTitle">Title of your header</param>
            <param name="backgroundColor">Background color of header</param>
        </member>
        <member name="M:MSCLoader.Keybind.AddHeader(MSCLoader.Mod,System.String,UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Add Header, blue title bar that can be used to separate settings.
            </summary>
            <param name="mod">Your mod instance</param>
            <param name="HeaderTitle">Title of your header</param>
            <param name="backgroundColor">Background color of header</param>
            <param name="textColor">Text Color of header</param>
        </member>
        <member name="M:MSCLoader.Keybind.Get(MSCLoader.Mod)">
            <summary>
            Return all keybinds for mod.
            </summary>
            <param name="mod">The mod to get the Keybinds for.</param>
            <returns>List of Keybinds for the mod.</returns>
        </member>
        <member name="M:MSCLoader.Keybind.GetDefault(MSCLoader.Mod)">
            <summary>
            Return all default keybinds for mod.
            </summary>
            <param name="mod">The mod to get the keybinds for.</param>
            <returns>List of default Keybinds for the mod.</returns>
        </member>
        <member name="M:MSCLoader.Keybind.#ctor(System.String,System.String,UnityEngine.KeyCode)">
            <summary>
            Constructor for Keybind without modifier
            </summary>
            <param name="id">The ID of the Keybind.</param>
            <param name="name">The name of the Keybind.</param>
            <param name="key">The KeyCode the user will press.</param>
            <example><code source="Examples.cs" region="KeyBind1" lang="C#" 
            title="Keybind without modifier" /></example>
        </member>
        <member name="M:MSCLoader.Keybind.#ctor(System.String,System.String,UnityEngine.KeyCode,UnityEngine.KeyCode)">
            <summary>
            Constructor for Keybind
            </summary>
            <param name="id">The ID of the Keybind (Used only once in your mod).</param>
            <param name="name">The name of the Keybind that will be displayed.</param>
            <param name="key">The KeyCode the user will press.</param>
            <param name="modifier">The modifier KeyCode the user will have to press.</param>
            <example><code source="Examples.cs" region="KeyBind2" lang="C#" 
            title="Keybind and modifier" /></example>
        </member>
        <member name="M:MSCLoader.Keybind.GetKeybind">
            <summary>
            Check if keybind is being hold down. (Same behaviour as GetKey)
            </summary>
            <returns>true, if the keybind is being hold down.</returns>
            <example><code source="Examples.cs" region="GetKeybind" lang="C#" 
            title="Keybind and modifier" /></example>
        </member>
        <member name="M:MSCLoader.Keybind.GetKeybindDown">
            <summary>
            Check if the keybind was just pressed once. (Same behaviour as GetKeyDown)
            </summary>
            <returns>true, Check if the keybind was just pressed.</returns>
            <example><code source="Examples.cs" region="GetKeybindDown" lang="C#" 
            title="Keybind and modifier" /></example>
        </member>
        <member name="M:MSCLoader.Keybind.GetKeybindUp">
            <summary>
            Check if the keybind was just released. (Same behaviour as GetKeyUp)
            </summary>
            <returns>true, Check if the keybind was just released.</returns>
            <example><code source="Examples.cs" region="GetKeybindUp" lang="C#" 
            title="Keybind and modifier" /></example>
        </member>
        <member name="M:MSCLoader.Keybind.IsPressed">
            <summary>
            [DEPRECATED] Checks if the Keybind is being held down.
            </summary>
            <returns>true, if the Keybind is being held down.</returns>
            <example><code source="Examples.cs" region="KeyBindPress" lang="C#" 
            title="Keybind and modifier" /></example>
        </member>
        <member name="M:MSCLoader.Keybind.IsDown">
            <summary>
            [DEPRECATED] Checks if the Keybind was just pressed.
            </summary>
            <returns>true, if the Keybind is being pressed.</returns>
            <example><code source="Examples.cs" region="KeyBindDown" lang="C#" 
            title="Keybind and modifier" /></example>
        </member>
        <member name="T:MSCLoader.LoadAssets">
            <summary>
            Class for Loading custom assets from Assets folder
            </summary>
        </member>
        <member name="M:MSCLoader.LoadAssets.MakeGameObjectPickable(UnityEngine.GameObject)">
            <summary>
            Make GameObject Pickable, make sure your GameObject has Rigidbody and colliders attached.
            </summary>
            <param name="go">Your GameObject</param>
        </member>
        <member name="M:MSCLoader.LoadAssets.LoadTexture(MSCLoader.Mod,System.String,System.Boolean)">
            <summary>
            Load texture (*.dds, *.jpg, *.png, *.tga) from mod assets folder
            </summary>
            <example>
            You need to enter file name from your mod's asset folder.<code source="Examples.cs" region="LoadTexture" lang="C#" 
            title="Example for change texture when we press key" /></example>
            <param name="mod">Mod instance.</param>
            <param name="fileName">File name to load from assets folder (for example "texture.dds")</param>
            <param name="normalMap">Normal mapping (default false)</param>
            <returns>Returns unity Texture2D</returns>
        </member>
        <member name="M:MSCLoader.LoadAssets.LoadOBJ(MSCLoader.Mod,System.String,System.Boolean,System.Boolean)">
            <summary>
            Load (*.obj) file from mod assets folder and return as GameObject
            </summary>
            <param name="mod">Mod instance.</param>
            <param name="fileName">File name to load from assets folder (for example "beer.obj")</param>
            <param name="collider">Apply mesh collider to object</param>
            <param name="rigidbody">Apply rigidbody to object to affect gravity (don't do it without collider)</param>
            <returns>Returns unity GameObject</returns>
            <example>Example Code
            <code source="Examples.cs" region="LoadOBJ" lang="C#" />
            </example>
        </member>
        <member name="M:MSCLoader.LoadAssets.LoadOBJMesh(MSCLoader.Mod,System.String)">
            <summary>
            Load (*.obj) file from mod assets folder and return as Mesh
            </summary>
            <param name="mod">Mod instance.</param>
            <param name="fileName">File name to load from assets folder (for example "beer.obj")</param>
            <returns>Returns unity Mesh</returns>
            <example>Example Code
            <code source="Examples.cs" region="LoadOBJMesh" lang="C#" />
            </example>
        </member>
        <member name="M:MSCLoader.LoadAssets.LoadBundle(MSCLoader.Mod,System.String)">
            <summary>
            A function for Loading AssetBundles Synchronously (without coroutines)
            </summary>
            <note>
            Not recomended for big files, may increase loading times.
            </note> 
            <example> Example based on loading settings assets.
            <code source="Examples.cs" region="LoadBundle" lang="C#"/></example>
            <param name="mod">Mod instance.</param>
            <param name="bundleName">File name to load (for example "something.unity3d")</param>
            <returns>Returns unity AssetBundle</returns>
        </member>
        <member name="T:MSCLoader.Mod">
            <summary>
            The base mod class, all mods should have this class.
            </summary>
            <example><code source="Examples.cs" region="Mod" lang="C#" 
            title="Example Mod Class" /></example>
        </member>
        <member name="P:MSCLoader.Mod.LoadInMenu">
            <summary>
            Load this mod in Main Menu.
            (in most cases should be false, use only if you need this).
            </summary>
        </member>
        <member name="P:MSCLoader.Mod.UseAssetsFolder">
            <summary>
            Set this to true if you want load custom files from Assets folder
            (This will create a subfolder for your mod)
            </summary>
        </member>
        <member name="P:MSCLoader.Mod.SecondPass">
            <summary>
            Enable SecondPassOnLoad() that will execute after all mods have been loaded.
            </summary>
        </member>
        <member name="P:MSCLoader.Mod.ID">
            <summary>
            The ID for your mod (This should be unique).
            </summary>
        </member>
        <member name="P:MSCLoader.Mod.Name">
            <summary>
            The name of mod that will be displayed in settings.
            (if not set, will be same as ID)
            </summary>
        </member>
        <member name="P:MSCLoader.Mod.Version">
            <summary>
            The current version of the mod.
            (prefered standard version format: 2, 3 or 4 digits)
            </summary>
        </member>
        <member name="P:MSCLoader.Mod.Author">
            <summary>
            Author of the mod
            (Enter your nickname in this variable)
            </summary>
        </member>
        <member name="M:MSCLoader.Mod.ModSettings">
            <summary>
            All settings should be created here.
            </summary>
        </member>
        <member name="M:MSCLoader.Mod.ModSettingsLoaded">
            <summary>
            Called after saved settings is loaded from file.
            </summary>
        </member>
        <member name="M:MSCLoader.Mod.OnNewGame">
            <summary>
            Called once after starting "New Game"
            You can reset/delete your saves here
            </summary>
        </member>
        <member name="M:MSCLoader.Mod.OnMenuLoad">
            <summary>
            Called once in main menu (only when LoadInMenu is true).
            </summary>
        </member>
        <member name="M:MSCLoader.Mod.OnLoad">
            <summary>
            Called once, after GAME scene is fully loaded.
            </summary>
        </member>
        <member name="M:MSCLoader.Mod.SecondPassOnLoad">
            <summary>
            Called once, after ALL mods has finished OnLoad() and when SecondPass is set to true
            (Executed still before first pass of Update(), but NOT exectued if OnLoad() failed with error)
            </summary>
        </member>
        <member name="M:MSCLoader.Mod.OnSave">
            <summary>
            Called once, when save and quit.
            </summary>
        </member>
        <member name="M:MSCLoader.Mod.OnGUI">
            <summary>
            Standard unity OnGUI().
            </summary>
            <example>See: https://docs.unity3d.com/500/Documentation/Manual/GUIScriptingGuide.html
            </example>
        </member>
        <member name="M:MSCLoader.Mod.Update">
            <summary>
            Called once every frame
            (standard unity Update()).
            </summary>
        </member>
        <member name="M:MSCLoader.Mod.FixedUpdate">
            <summary>
            Called once every fixed frame 
            (standard unity FixedUpdate()).
            </summary>
        </member>
        <member name="T:MSCLoader.ModAudio">
            <summary>
            Audio library (play local *.mp3, *.ogg, *.wav, *.aiff)
            </summary>
        </member>
        <member name="F:MSCLoader.ModAudio.audioSource">
            <summary>
            Your AudioSource goes here
            </summary>
        </member>
        <member name="M:MSCLoader.ModAudio.LoadAudioFromFile(System.String,System.Boolean,System.Boolean)">
            <summary>
            Load audio from file
            </summary>
            <param name="path">Full path to audio file</param>
            <param name="doStream">Stream from HDD instead of loading to memory (recommended)</param>
            <param name="background">Load file in background</param>
        </member>
        <member name="M:MSCLoader.ModAudio.Time">
            <summary>
            Get time position of audio file
            </summary>
            <returns>Time in TimeSpan format</returns>
        </member>
        <member name="M:MSCLoader.ModAudio.Play(System.Single,System.Single)">
            <summary>
            Play loaded audio file from specifed time.
            </summary>
            <param name="time">time to start</param>
            <param name="delay">optional delay</param>
        </member>
        <member name="M:MSCLoader.ModAudio.Play">
            <summary>
            Play loaded audio file
            </summary>
        </member>
        <member name="M:MSCLoader.ModAudio.Stop">
            <summary>
            Stop playing audio file
            </summary>
        </member>
        <member name="T:MSCLoader.ModAudioStream">
            <summary>
            Audio library (Play online mp3 streams)
            </summary>
        </member>
        <member name="F:MSCLoader.ModAudioStream.audioSource">
            <summary>
            Your AudioSource goes here
            </summary>
        </member>
        <member name="F:MSCLoader.ModAudioStream.songInfo">
            <summary>
            Song info readed from metadata (if available)
            </summary>
        </member>
        <member name="F:MSCLoader.ModAudioStream.showDebug">
            <summary>
            Show debug info
            </summary>
        </member>
        <member name="M:MSCLoader.ModAudioStream.PlayStream(System.String)">
            <summary>
            Plays the stream
            </summary>
            <param name="streamURL">stream url</param>
        </member>
        <member name="M:MSCLoader.ModAudioStream.StopStream">
            <summary>
            Stops the stream
            </summary>
        </member>
        <member name="T:MSCLoader.ModConsole">
            <summary>
            The console for MSCLoader.
            </summary>
        </member>
        <member name="M:MSCLoader.ModConsole.Print(System.String)">
            <summary>
            Print a message to console.
            </summary>
            <param name="str">Text to print to console.</param>
            <example><code source="Examples.cs" region="ModConsolePrint" lang="C#" 
            title="Example Code" /></example>
        </member>
        <member name="M:MSCLoader.ModConsole.Print(System.Object)">
            <summary>
            Prints anything to console.
            </summary>
            <param name="obj">Text or object to print to console.</param>
            <example><code source="Examples.cs" region="ModConsolePrint" lang="C#" 
            title="Example Code" /></example>
        </member>
        <member name="M:MSCLoader.ModConsole.Error(System.String)">
            <summary>
            Print an error to the console.
            </summary>
            <param name="str">Text to print to error log.</param>
            <example><code source="Examples.cs" region="ModConsoleError" lang="C#" 
            title="Example Code" /></example>
        </member>
        <member name="M:MSCLoader.ModConsole.Warning(System.String)">
            <summary>
            Print an warning to the console.
            </summary>
            <param name="str">Text to print to error log.</param>
            <example><code source="Examples.cs" region="ModConsoleError" lang="C#" 
            title="Example Code" /></example>
        </member>
        <member name="T:MSCLoader.CurrentScene">
            <summary>
            List of possible scenes
            </summary>
        </member>
        <member name="F:MSCLoader.CurrentScene.MainMenu">
            <summary>
            Main Menu
            </summary>
        </member>
        <member name="F:MSCLoader.CurrentScene.Game">
            <summary>
            Game Scene
            </summary>
        </member>
        <member name="F:MSCLoader.CurrentScene.NewGameIntro">
            <summary>
            Intro for new game
            </summary>
        </member>
        <member name="T:MSCLoader.ModLoader">
            <summary>
            This is main Mod Loader class.
            </summary>
        </member>
        <member name="F:MSCLoader.ModLoader.LogAllErrors">
            <summary>
            When true, it prints all errors from Update() and OnGUI() class.
            </summary>
        </member>
        <member name="P:MSCLoader.ModLoader.LoadedMods">
            <summary>
            A list of all loaded mods.
            </summary>
        </member>
        <member name="F:MSCLoader.ModLoader.InvalidMods">
            <summary>
            A list of invalid mod files 
            (like random dll in Mods Folder that isn't a mod).
            </summary>
        </member>
        <member name="F:MSCLoader.ModLoader.Instance">
            <summary>
            The instance of ModLoader.
            </summary>
        </member>
        <member name="F:MSCLoader.ModLoader.MSCLoader_Ver">
            <summary>
            The current version of the ModLoader.
            </summary>
        </member>
        <member name="F:MSCLoader.ModLoader.experimental">
            <summary>
            Is this version of ModLoader experimental (this is NOT game experimental branch)
            </summary>
        </member>
        <member name="F:MSCLoader.ModLoader.devMode">
            <summary>
            Is DevMode active
            </summary>
        </member>
        <member name="M:MSCLoader.ModLoader.CheckSteam">
            <summary>
            Check if steam is present
            </summary>
            <returns>Valid steam detected.</returns>
        </member>
        <member name="M:MSCLoader.ModLoader.CheckIfExperimental">
            <summary>
            Check if steam release is from experimental branch
            </summary>
            <returns>Experimental detected.</returns>
        </member>
        <member name="M:MSCLoader.ModLoader.GetCurrentScene">
            <summary>
            Get Current Game Scene
            </summary>
            <returns>CurrentScene enum</returns>
        </member>
        <member name="M:MSCLoader.ModLoader.IsModPresent(System.String)">
            <summary>
            Check if other ModID is present and enabled
            </summary>
            <param name="ModID">Mod ID of other mod to check (Case sensitive)</param>
            <returns>true if mod ID is present</returns>
        </member>
        <member name="M:MSCLoader.ModLoader.GetModConfigFolder(MSCLoader.Mod)">
            <summary>
            Mod config folder, use this if you want save something. 
            </summary>
            <returns>Path to your mod config folder</returns>
            <param name="mod">Your mod Class.</param>
            <example>Example Code in Mod subclass.
            <code source="Examples.cs" region="GetModConfigFolder" lang="C#" />
            Example from other than Mod subclass.
            <code source="Examples.cs" region="GetModConfigFolder2" lang="C#" />
            </example>
        </member>
        <member name="M:MSCLoader.ModLoader.GetModAssetsFolder(MSCLoader.Mod)">
            <summary>
            Mod assets folder, use this if you want load custom content. 
            </summary>
            <returns>Path to your mod assets folder</returns>
            <param name="mod">Your mod Class.</param>
            <example>Example Code in Mod subclass.
            <code source="Examples.cs" region="GetModAssetsFolder" lang="C#" />
            Example from other than Mod subclass.
            <code source="Examples.cs" region="GetModAssetsFolder2" lang="C#" />
            </example> 
        </member>
        <member name="M:MSCLoader.ModLoader.Init_MD">
            <summary>
            Initialize ModLoader with Mods folder in My Documents (like it was in 0.1)
            </summary>
        </member>
        <member name="M:MSCLoader.ModLoader.Init_GF">
            <summary>
            Initialize ModLoader with Mods folder in Game Folder (near game's exe)
            </summary>
        </member>
        <member name="M:MSCLoader.ModLoader.Init_AD">
            <summary>
            Initialize ModLoader with Mods folder in AppData/LocalLow (near game's save)
            </summary>
        </member>
        <member name="M:MSCLoader.ModLoader.MainMenuPath">
            <summary>
            Toggle main menu path via settings
            </summary>
        </member>
        <member name="T:MSCLoader.ModUI">
            <summary>
            UI stuff
            </summary>
        </member>
        <member name="M:MSCLoader.ModUI.GetCanvas">
            <summary>
            Get UI canvas
            </summary>
            <returns>Canvas GameObject</returns>
        </member>
        <member name="F:MSCLoader.ModUI.messageBox">
            <summary>
            Message box GameObject
            </summary>
        </member>
        <member name="M:MSCLoader.ModUI.ShowMessage(System.String)">
            <summary>
            Show Message Box with simple message
            </summary>
            <param name="message">Message content</param>
        </member>
        <member name="M:MSCLoader.ModUI.ShowMessage(System.String,System.String)">
            <summary>
            Show Message Box with simple message
            </summary>
            <param name="message">Message content</param>
            <param name="title">Title of message</param>
        </member>
        <member name="M:MSCLoader.ModUI.ShowYesNoMessage(System.String,System.Action)">
            <summary>
            Show simple question message, and do something when user click yes.
            </summary>
            <param name="message">Message content</param>
            <param name="ifYes">What to do when user click yes</param>
        </member>
        <member name="M:MSCLoader.ModUI.ShowYesNoMessage(System.String,System.String,System.Action)">
            <summary>
            Show simple question message, and do something when user click yes.
            </summary>
            <param name="message">Message content</param>
            <param name="title">Title of message</param>
            <param name="ifYes">What to do when user click yes</param>
        </member>
        <member name="T:MSCLoader.ModUIDrag">
            <summary>
            Make window draggable, attach to UI gameobject 
            </summary>
        </member>
        <member name="T:MSCLoader.SaveLoad">
            <summary>
            Save and Load Class for gameobject and custom class
            </summary>
        </member>
        <member name="M:MSCLoader.SaveLoad.SaveGameObject(MSCLoader.Mod,UnityEngine.GameObject,System.String)">
            <summary>
            Save position and rotation of single gameobject to file (DO NOT loop this for multiple gameobjects)
            Call this in <see cref="M:MSCLoader.Mod.OnSave"/>  function
            </summary>
            <param name="mod">Mod instance</param>
            <param name="g">Your GameObject to save</param>
            <param name="fileName">Name of the save file</param>
        </member>
        <member name="M:MSCLoader.SaveLoad.LoadGameObject(MSCLoader.Mod,System.String)">
            <summary>
            Load position and rotation of single gameobject from file
            Call this AFTER you load your gameobject
            </summary>
            <param name="mod">Mod instance</param>
            <param name="fileName">Name of the save file</param>
        </member>
        <member name="M:MSCLoader.SaveLoad.SerializeSaveFile``1(MSCLoader.Mod,``0,System.String)">
            <summary>
            Serialize custom save class (see example)
            Call Only in <see cref="M:MSCLoader.Mod.OnSave"/>
            </summary>
            <typeparam name="T">Your class</typeparam>
            <param name="mod">Mod Instance</param>
            <param name="saveDataClass">Your class</param>
            <param name="fileName">Name of the save file</param>
            <example><code source="SaveExamples.cs" region="Serializer" lang="C#" 
            title="Example of save class" /></example>
        </member>
        <member name="M:MSCLoader.SaveLoad.DeserializeSaveFile``1(MSCLoader.Mod,System.String)">
            <summary>
            Deserialize custom save class (see example)
            </summary>
            <typeparam name="T">Your save class</typeparam>
            <param name="mod">Mod Instance</param>
            <param name="fileName">Name of the save file</param>
            <returns>Deserialized class</returns>
            <example><code source="SaveExamples.cs" region="Deserializer" lang="C#" 
            title="Example of loading class" /></example>
        </member>
        <member name="T:MSCLoader.Settings">
            <summary>
            Add simple settings for mods.
            </summary>
        </member>
        <member name="F:MSCLoader.Settings.modSettings">
            <summary>
            List of settings
            </summary>
        </member>
        <member name="F:MSCLoader.Settings.modSettingsDefault">
            <summary>
            List of default settings values
            </summary>
        </member>
        <member name="P:MSCLoader.Settings.ID">
            <summary>
            The ID of the settings (Should only be used once in your mod).
            </summary>
        </member>
        <member name="P:MSCLoader.Settings.Name">
            <summary>
            Visible name for your setting.
            </summary>
        </member>
        <member name="P:MSCLoader.Settings.Mod">
            <summary>
            The Mod this Setting belongs to (This is set when using Add whatever).
            </summary>
        </member>
        <member name="P:MSCLoader.Settings.Value">
            <summary>
            Default Value for setting.
            </summary>
        </member>
        <member name="P:MSCLoader.Settings.DoAction">
            <summary>
            Action to execute for specifed setting.
            </summary>
        </member>
        <member name="P:MSCLoader.Settings.type">
            <summary>
            Type of setting.
            </summary>
        </member>
        <member name="P:MSCLoader.Settings.Vals">
            <summary>
            Helpful additional variables.
            </summary>
        </member>
        <member name="M:MSCLoader.Settings.#ctor(System.String,System.String,System.Object)">
            <summary>
            Constructor for Settings
            </summary>
            <param name="id">Unique settings ID for your mod</param>
            <param name="name">Name of the setting</param>
            <param name="value">Default Value for this setting</param>
            <example><code source="SettingsExamples.cs" region="Constructor1" lang="C#" 
            title="Settings constructor" /></example>
        </member>
        <member name="M:MSCLoader.Settings.#ctor(System.String,System.String,System.Action)">
            <summary>
            Constructor for Settings
            </summary>
            <param name="id">Unique settings ID for your mod</param>
            <param name="name">Name of the setting</param>
            <param name="doAction">Function to execute for this setting</param>
            <example><code source="SettingsExamples.cs" region="Constructor2" lang="C#" 
            title="Settings constructor" /></example>
        </member>
        <member name="M:MSCLoader.Settings.#ctor(System.String,System.String,System.Object,System.Action)">
            <summary>
            Constructor for Settings
            </summary>
            <param name="id">Unique settings ID for your mod</param>
            <param name="name">Name of the setting</param>
            <param name="value">Default Value for this setting</param>
            <param name="doAction">Function to execute for this setting</param>
            <example><code source="SettingsExamples.cs" region="Constructor3" lang="C#" 
            title="Settings constructor" /></example>
        </member>
        <member name="M:MSCLoader.Settings.HideResetAllButton(MSCLoader.Mod)">
            <summary>
            Hides "reset all settings to default" button.
            </summary>
        </member>
        <member name="M:MSCLoader.Settings.Get(MSCLoader.Mod)">
            <summary>
            Return all settings for mod.
            </summary>
            <param name="mod">The mod to get the settings for.</param>
            <returns>List of Settings for the mod.</returns>
        </member>
        <member name="M:MSCLoader.Settings.GetDefault(MSCLoader.Mod)">
            <summary> 
            Return all default settings for mod.
            </summary>
            <param name="mod">The mod to get the settings for.</param>
            <returns>List of Settings for the mod.</returns>
        </member>
        <member name="M:MSCLoader.Settings.AddCheckBox(MSCLoader.Mod,MSCLoader.Settings)">
            <summary>
            Add checkbox to settings menu (only <see langword="bool"/> Value accepted)
            Can execute action when its value is changed.
            </summary>
            <param name="mod">Your mod instance</param>
            <param name="setting">Your settings variable</param>
            <example><code source="SettingsExamples.cs" region="AddCheckBox" lang="C#" 
            title="Add checkbox" /></example>
        </member>
        <member name="M:MSCLoader.Settings.AddCheckBox(MSCLoader.Mod,MSCLoader.Settings,System.String)">
            <summary>
            Add checkbox to settings menu with group, only one checkbox can be set to <see langword="true"/> in this group
            </summary>
            <param name="mod">Your mod instance</param>
            <param name="setting">Your settings variable</param>
            <param name="group">Unique group name, same for all checkboxes that will be grouped</param>
            <example><code source="SettingsExamples.cs" region="AddCheckBoxGroup" lang="C#" 
            title="Add grouped checkboxes" /></example>
        </member>
        <member name="M:MSCLoader.Settings.AddResetButton(MSCLoader.Mod,System.String,MSCLoader.Settings[])">
            <summary>
            Add custom reset to default button
            </summary>
            <param name="mod">Your mod instance</param>
            <param name="name">Button name</param>
            <param name="sets">array of settings to reset</param>
        </member>
        <member name="M:MSCLoader.Settings.AddButton(MSCLoader.Mod,MSCLoader.Settings,System.String)">
            <summary>
            Add button that can execute function.
            </summary>
            <param name="mod">Your mod instance</param>
            <param name="setting">Your settings variable</param>
            <param name="description">Short optional description for this button</param>
            <example><code source="SettingsExamples.cs" region="AddButton" lang="C#" 
            title="Add button" /></example>
        </member>
        <member name="M:MSCLoader.Settings.AddButton(MSCLoader.Mod,MSCLoader.Settings,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color,System.String)">
            <summary>
            Add button that can execute function.
            </summary>
            <param name="mod">Your mod instance</param>
            <param name="setting">Your settings variable</param>
            <param name="normalColor">Button color</param>
            <param name="highlightedColor">Button color when highlighted</param>
            <param name="pressedColor">Button color when pressed</param>
            <param name="description">Short optional description for this button</param>
            <example><code source="SettingsExamples.cs" region="AddButton" lang="C#" 
            title="Add button" /></example>
        </member>
        <member name="M:MSCLoader.Settings.AddButton(MSCLoader.Mod,MSCLoader.Settings,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color,System.String)">
            <summary>
            Add button that can execute function.
            </summary>
            <param name="mod">Your mod instance</param>
            <param name="setting">Your settings variable</param>
            <param name="normalColor">Button color</param>
            <param name="highlightedColor">Button color when highlighted</param>
            <param name="pressedColor">Button color when pressed</param>
            <param name="buttonTextColor">Text color on Button</param>
            <param name="description">Short optional description for this button</param>
            <example><code source="SettingsExamples.cs" region="AddButton" lang="C#" 
            title="Add button" /></example>
        </member>
        <member name="M:MSCLoader.Settings.AddSlider(MSCLoader.Mod,MSCLoader.Settings,System.Int32,System.Int32)">
            <summary>
            Add Slider, slider can execute action when its value is changed.
            </summary>
            <param name="mod">Your mod instance</param>
            <param name="setting">Your settings variable</param>
            <param name="maxValue">Max value of slider</param>
            <param name="minValue">Min value of slider</param>
            <example><code source="SettingsExamples.cs" region="AddSlider" lang="C#" 
            title="Add Slider" /></example>
        </member>
        <member name="M:MSCLoader.Settings.AddSlider(MSCLoader.Mod,MSCLoader.Settings,System.Int32,System.Int32,System.String[])">
            <summary>
            Add Slider, slider can execute action when its value is changed.
            </summary>
            <param name="mod">Your mod instance</param>
            <param name="setting">Your settings variable</param>
            <param name="maxValue">Max value of slider</param>
            <param name="minValue">Min value of slider</param>
            <param name="textValues">Array of text values (array index equals to slider value)</param>
            <example><code source="SettingsExamples.cs" region="AddSlider" lang="C#" 
            title="Add Slider" /></example>
        </member>
        <member name="M:MSCLoader.Settings.AddSlider(MSCLoader.Mod,MSCLoader.Settings,System.Single,System.Single)">
            <summary>
            Add Slider, slider can execute action when its value is changed.
            </summary>
            <param name="mod">Your mod instance</param>
            <param name="setting">Your settings variable</param>
            <param name="maxValue">Max value of slider</param>
            <param name="minValue">Min value of slider</param>
            <example><code source="SettingsExamples.cs" region="AddSlider" lang="C#" 
            title="Add Slider" /></example>
        </member>
        <member name="M:MSCLoader.Settings.AddTextBox(MSCLoader.Mod,MSCLoader.Settings,System.String)">
            <summary>
            Add TextBox where user can type any text
            </summary>
            <param name="mod">Your mod instance</param>
            <param name="setting">Your settings variable</param>
            <param name="placeholderText">Placeholder text (like "Enter text...")</param>
        </member>
        <member name="M:MSCLoader.Settings.AddTextBox(MSCLoader.Mod,MSCLoader.Settings,System.String,UnityEngine.Color)">
            <summary>
            Add TextBox where user can type any text
            </summary>
            <param name="mod">Your mod instance</param>
            <param name="setting">Your settings variable</param>
            <param name="placeholderText">Placeholder text (like "Enter text...")</param>
            <param name="titleTextColor">Text color of title</param>
        </member>
        <member name="M:MSCLoader.Settings.AddHeader(MSCLoader.Mod,System.String)">
            <summary>
            Add Header, blue title bar that can be used to separate settings.
            </summary>
            <param name="mod">Your mod instance</param>
            <param name="HeaderTitle">Title of your header</param>
        </member>
        <member name="M:MSCLoader.Settings.AddHeader(MSCLoader.Mod,System.String,UnityEngine.Color)">
            <summary>
            Add Header, blue title bar that can be used to separate settings.
            </summary>
            <param name="mod">Your mod instance</param>
            <param name="HeaderTitle">Title of your header</param>
            <param name="backgroundColor">Background color of header</param>
        </member>
        <member name="M:MSCLoader.Settings.AddHeader(MSCLoader.Mod,System.String,UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Add Header, blue title bar that can be used to separate settings.
            </summary>
            <param name="mod">Your mod instance</param>
            <param name="HeaderTitle">Title of your header</param>
            <param name="backgroundColor">Background color of header</param>
            <param name="textColor">Text Color of header</param>
        </member>
        <member name="M:MSCLoader.Settings.AddText(MSCLoader.Mod,System.String)">
            <summary>
            Add just a text
            </summary>
            <param name="mod">Your mod instance</param>
            <param name="text">Just a text (supports unity rich text)</param>
        </member>
        <member name="M:MSCLoader.Settings.GetValue">
            <summary>
            Get value of setting.
            </summary>
            <returns><see cref="P:MSCLoader.Settings.Value"/> of setting</returns>
            <example><code source="SettingsExamples.cs" region="GetValue" lang="C#" 
            title="Get Value" /></example>
        </member>
    </members>
</doc>
